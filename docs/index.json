{
  "api/OpenCollar.Extensions.SqlClient.QueryResults-6.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.QueryResults-6.html",
    "title": "Class QueryResults<T1, T2, T3, T4, T5, T6> | API Documentation",
    "keywords": "Class QueryResults<T1, T2, T3, T4, T5, T6> A simple, strongly-typed, container for the results of a query execution. Inheritance System.Object QueryResults <T1> QueryResults <T1, T2> QueryResults <T1, T2, T3> QueryResults <T1, T2, T3, T4> QueryResults <T1, T2, T3, T4, T5> QueryResults<T1, T2, T3, T4, T5, T6> QueryResults<T1, T2, T3, T4, T5, T6, T7> Implements System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable Inherited Members QueryResults<T1, T2, T3, T4, T5>.Results5 QueryResults<T1, T2, T3, T4, T5>.GetEnumerator() QueryResults<T1, T2, T3, T4>.Results4 QueryResults<T1, T2, T3, T4>.GetEnumerator() QueryResults<T1, T2, T3>.Results3 QueryResults<T1, T2, T3>.GetEnumerator() QueryResults<T1, T2>.Results2 QueryResults<T1, T2>.GetEnumerator() QueryResults<T1>.Results1 QueryResults<T1>.IEnumerable.GetEnumerator() Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public class QueryResults<T1, T2, T3, T4, T5, T6> : QueryResults<T1, T2, T3, T4, T5>, IEnumerable<object>, IEnumerable Type Parameters Name Description T1 The type of the first result set. T2 The type of the second result set. T3 The type of the third result set. T4 The type of the fourth result set. T5 The type of the fifth result set. T6 The type of the sixth result set. Properties | Improve this Doc View Source Results6 Gets the sixth set of results. Declaration public T6 Results6 { get; } Property Value Type Description T6 The sixth set of results. Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public override IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > An enumerator that can be used to iterate through the collection. Overrides OpenCollar.Extensions.SqlClient.QueryResults<T1, T2, T3, T4, T5>.GetEnumerator() Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/OpenCollar.Extensions.SqlClient.ServiceCollectionExtensions.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | API Documentation",
    "keywords": "Class ServiceCollectionExtensions Extensions to the Microsoft.Extensions.DependencyInjection.IServiceCollection class providing fluent methods to register ConnectionFactory services. Inheritance System.Object ServiceCollectionExtensions Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddConnectionFactory<TConnectionFactory>(IServiceCollection) Adds a database connection service to the service collection. Declaration public static IServiceCollection AddConnectionFactory<TConnectionFactory>(this IServiceCollection serviceCollection) where TConnectionFactory : ConnectionFactory Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to which to add the connection factory. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The service collection given in the serviceCollection . Type Parameters Name Description TConnectionFactory The type of the connection factory implementation to register. Must be derived from the ConnectionFactory base class."
  },
  "api/OpenCollar.Extensions.SqlClient.Configuration.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.Configuration.html",
    "title": "Namespace OpenCollar.Extensions.SqlClient.Configuration | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.SqlClient.Configuration Interfaces IDatabaseConfiguration A configuration object used to define the settings for database connections. IDatabaseConnectionConfiguration A configuration object used to define the settings for a database connection."
  },
  "api/OpenCollar.Extensions.SqlClient.DatabaseException.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.DatabaseException.html",
    "title": "Class DatabaseException | API Documentation",
    "keywords": "Class DatabaseException Defines an exception thrown within the context of a database connection. Inheritance System.Object System.Exception ConnectionException DatabaseException QueryException Implements System.Runtime.Serialization.ISerializable Inherited Members ConnectionException.ConnectionString Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax [Serializable] public class DatabaseException : ConnectionException, ISerializable Constructors | Improve this Doc View Source DatabaseException(SerializationInfo, StreamingContext) Initializes a new instance of the DatabaseException class. Declaration protected DatabaseException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source DatabaseException(String) Initializes a new instance of the DatabaseException class. Declaration public DatabaseException(string connectionString) Parameters Type Name Description System.String connectionString The connection string that defines the connection on which the error occurred. Exceptions Type Condition System.ArgumentNullException connectionString is null . System.ArgumentException connectionString is zero-length or contains only white-space characters. | Improve this Doc View Source DatabaseException(String, String) Initializes a new instance of the DatabaseException class. Declaration public DatabaseException(string connectionString, string message) Parameters Type Name Description System.String connectionString The connection string that defines the connection on which the error occurred. System.String message The message that describes the error. Exceptions Type Condition System.ArgumentNullException connectionString is null . System.ArgumentException connectionString is zero-length or contains only white-space characters. | Improve this Doc View Source DatabaseException(String, String, Exception) Initializes a new instance of the DatabaseException class. Declaration public DatabaseException(string connectionString, string message, Exception innerException) Parameters Type Name Description System.String connectionString The connection string that defines the connection on which the error occurred. System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. Exceptions Type Condition System.ArgumentNullException connectionString is null . System.ArgumentException connectionString is zero-length or contains only white-space characters. Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Overrides ConnectionException.GetObjectData(SerializationInfo, StreamingContext) Implements System.Runtime.Serialization.ISerializable See Also ConnectionException"
  },
  "api/OpenCollar.Extensions.SqlClient.Connection.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.Connection.html",
    "title": "Class Connection | API Documentation",
    "keywords": "Class Connection A managed database connection. Inheritance System.Object OpenCollar.Extensions.Disposable Connection Implements System.IDisposable Inherited Members OpenCollar.Extensions.Disposable.Dispose() OpenCollar.Extensions.Disposable.CheckNotDisposed() Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public sealed class Connection : Disposable, IDisposable Properties | Improve this Doc View Source SqlConnection Gets the underlying SQL connection. Declaration public SqlConnection SqlConnection { get; } Property Value Type Description Microsoft.Data.SqlClient.SqlConnection The underlying SQL connection. Methods | Improve this Doc View Source CheckForUnreportedErrors(SqlCommand) Checks for unreported errors on the connection (such as unrecognized stored procedures). Declaration public void CheckForUnreportedErrors(SqlCommand command = null) Parameters Type Name Description Microsoft.Data.SqlClient.SqlCommand command The command being executed. Exceptions Type Condition DatabaseException | Improve this Doc View Source Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides OpenCollar.Extensions.Disposable.Dispose(System.Boolean) Implements System.IDisposable See Also OpenCollar.Extensions.Disposable"
  },
  "api/OpenCollar.Extensions.SqlClient.QueryResults-5.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.QueryResults-5.html",
    "title": "Class QueryResults<T1, T2, T3, T4, T5> | API Documentation",
    "keywords": "Class QueryResults<T1, T2, T3, T4, T5> A simple, strongly-typed, container for the results of a query execution. Inheritance System.Object QueryResults <T1> QueryResults <T1, T2> QueryResults <T1, T2, T3> QueryResults <T1, T2, T3, T4> QueryResults<T1, T2, T3, T4, T5> QueryResults<T1, T2, T3, T4, T5, T6> Implements System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable Inherited Members QueryResults<T1, T2, T3, T4>.Results4 QueryResults<T1, T2, T3, T4>.GetEnumerator() QueryResults<T1, T2, T3>.Results3 QueryResults<T1, T2, T3>.GetEnumerator() QueryResults<T1, T2>.Results2 QueryResults<T1, T2>.GetEnumerator() QueryResults<T1>.Results1 QueryResults<T1>.IEnumerable.GetEnumerator() Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public class QueryResults<T1, T2, T3, T4, T5> : QueryResults<T1, T2, T3, T4>, IEnumerable<object>, IEnumerable Type Parameters Name Description T1 The type of the first result set. T2 The type of the second result set. T3 The type of the third result set. T4 The type of the fourth result set. T5 The type of the fifth result set. Properties | Improve this Doc View Source Results5 Gets the fifth set of results. Declaration public T5 Results5 { get; } Property Value Type Description T5 The fifth set of results. Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public override IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > An enumerator that can be used to iterate through the collection. Overrides OpenCollar.Extensions.SqlClient.QueryResults<T1, T2, T3, T4>.GetEnumerator() Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/OpenCollar.Extensions.SqlClient.QueryResults-8.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.QueryResults-8.html",
    "title": "Class QueryResults<T1, T2, T3, T4, T5, T6, T7, T8> | API Documentation",
    "keywords": "Class QueryResults<T1, T2, T3, T4, T5, T6, T7, T8> A simple, strongly-typed, container for the results of a query execution. Inheritance System.Object QueryResults <T1> QueryResults <T1, T2> QueryResults <T1, T2, T3> QueryResults <T1, T2, T3, T4> QueryResults <T1, T2, T3, T4, T5> QueryResults <T1, T2, T3, T4, T5, T6> QueryResults <T1, T2, T3, T4, T5, T6, T7> QueryResults<T1, T2, T3, T4, T5, T6, T7, T8> QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9> Implements System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable Inherited Members QueryResults<T1, T2, T3, T4, T5, T6, T7>.Results7 QueryResults<T1, T2, T3, T4, T5, T6, T7>.GetEnumerator() QueryResults<T1, T2, T3, T4, T5, T6>.Results6 QueryResults<T1, T2, T3, T4, T5, T6>.GetEnumerator() QueryResults<T1, T2, T3, T4, T5>.Results5 QueryResults<T1, T2, T3, T4, T5>.GetEnumerator() QueryResults<T1, T2, T3, T4>.Results4 QueryResults<T1, T2, T3, T4>.GetEnumerator() QueryResults<T1, T2, T3>.Results3 QueryResults<T1, T2, T3>.GetEnumerator() QueryResults<T1, T2>.Results2 QueryResults<T1, T2>.GetEnumerator() QueryResults<T1>.Results1 QueryResults<T1>.IEnumerable.GetEnumerator() Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public class QueryResults<T1, T2, T3, T4, T5, T6, T7, T8> : QueryResults<T1, T2, T3, T4, T5, T6, T7>, IEnumerable<object>, IEnumerable Type Parameters Name Description T1 The type of the first result set. T2 The type of the second result set. T3 The type of the third result set. T4 The type of the fourth result set. T5 The type of the fifth result set. T6 The type of the sixth result set. T7 The type of the seventh result set. T8 The type of the eighth result set. Properties | Improve this Doc View Source Results8 Gets the eighth set of results. Declaration public T8 Results8 { get; } Property Value Type Description T8 The eighth set of results. Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public override IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > An enumerator that can be used to iterate through the collection. Overrides OpenCollar.Extensions.SqlClient.QueryResults<T1, T2, T3, T4, T5, T6, T7>.GetEnumerator() Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/OpenCollar.Extensions.SqlClient.QueryResults-9.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.QueryResults-9.html",
    "title": "Class QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9> | API Documentation",
    "keywords": "Class QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9> A simple, strongly-typed, container for the results of a query execution. Inheritance System.Object QueryResults <T1> QueryResults <T1, T2> QueryResults <T1, T2, T3> QueryResults <T1, T2, T3, T4> QueryResults <T1, T2, T3, T4, T5> QueryResults <T1, T2, T3, T4, T5, T6> QueryResults <T1, T2, T3, T4, T5, T6, T7> QueryResults <T1, T2, T3, T4, T5, T6, T7, T8> QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9> QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Implements System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable Inherited Members QueryResults<T1, T2, T3, T4, T5, T6, T7, T8>.Results8 QueryResults<T1, T2, T3, T4, T5, T6, T7, T8>.GetEnumerator() QueryResults<T1, T2, T3, T4, T5, T6, T7>.Results7 QueryResults<T1, T2, T3, T4, T5, T6, T7>.GetEnumerator() QueryResults<T1, T2, T3, T4, T5, T6>.Results6 QueryResults<T1, T2, T3, T4, T5, T6>.GetEnumerator() QueryResults<T1, T2, T3, T4, T5>.Results5 QueryResults<T1, T2, T3, T4, T5>.GetEnumerator() QueryResults<T1, T2, T3, T4>.Results4 QueryResults<T1, T2, T3, T4>.GetEnumerator() QueryResults<T1, T2, T3>.Results3 QueryResults<T1, T2, T3>.GetEnumerator() QueryResults<T1, T2>.Results2 QueryResults<T1, T2>.GetEnumerator() QueryResults<T1>.Results1 QueryResults<T1>.IEnumerable.GetEnumerator() Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public class QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9> : QueryResults<T1, T2, T3, T4, T5, T6, T7, T8>, IEnumerable<object>, IEnumerable Type Parameters Name Description T1 The type of the first result set. T2 The type of the second result set. T3 The type of the third result set. T4 The type of the fourth result set. T5 The type of the fifth result set. T6 The type of the sixth result set. T7 The type of the seventh result set. T8 The type of the eighth result set. T9 The type of the ninth result set. Properties | Improve this Doc View Source Results9 Gets the ninth set of results. Declaration public T9 Results9 { get; } Property Value Type Description T9 The ninth set of results. Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public override IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > An enumerator that can be used to iterate through the collection. Overrides OpenCollar.Extensions.SqlClient.QueryResults<T1, T2, T3, T4, T5, T6, T7, T8>.GetEnumerator() Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/OpenCollar.Extensions.SqlClient.Constants.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.Constants.html",
    "title": "Namespace OpenCollar.Extensions.SqlClient.Constants | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.SqlClient.Constants Classes Keys Constant values used to identify the contextual information keys."
  },
  "api/OpenCollar.Extensions.SqlClient.ConnectionFactory.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.ConnectionFactory.html",
    "title": "Class ConnectionFactory | API Documentation",
    "keywords": "Class ConnectionFactory The base class for objects defining database connection factories. Inheritance System.Object ConnectionFactory Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public abstract class ConnectionFactory Constructors | Improve this Doc View Source ConnectionFactory(IServiceProvider, IDatabaseConfiguration) Initializes a new instance of the ConnectionFactory class. Declaration protected ConnectionFactory(IServiceProvider services, IDatabaseConfiguration configuration) Parameters Type Name Description System.IServiceProvider services The services provider from which to get resources such as loggers. IDatabaseConfiguration configuration The configuration for database connections as a whole. Exceptions Type Condition System.ArgumentNullException configuration is null . | Improve this Doc View Source ConnectionFactory(IServiceProvider, IDatabaseConfiguration, IEnvironmentMetadataProvider) Initializes a new instance of the ConnectionFactory class. Declaration protected ConnectionFactory(IServiceProvider services, IDatabaseConfiguration configuration, IEnvironmentMetadataProvider environmentMetadataProvider) Parameters Type Name Description System.IServiceProvider services The services provider from which to get resources such as loggers. IDatabaseConfiguration configuration The configuration for database connections as a whole. OpenCollar.Extensions.Environment.IEnvironmentMetadataProvider environmentMetadataProvider The service that provides the environment metadata for a given application. Exceptions Type Condition System.ArgumentNullException configuration is null . Properties | Improve this Doc View Source Configuration Gets the configuration of the database connection. Declaration public IDatabaseConnectionConfiguration Configuration { get; } Property Value Type Description IDatabaseConnectionConfiguration The configuration of the database connection. | Improve this Doc View Source ConnectionKey Gets the key in the Connections dictionary of the IDatabaseConnectionConfiguration that defines the connection details. Declaration protected abstract string ConnectionKey { get; } Property Value Type Description System.String The key in the Connections dictionary of the IDatabaseConnectionConfiguration that defines the connection details. | Improve this Doc View Source DatabaseEnvironment Gets a string containing the environment to which the database defined by the connection string belongs. This can be null if no environment metadata provider has been configured. Declaration protected string DatabaseEnvironment { get; } Property Value Type Description System.String A string containing the environment to which the database defined by the connection string belongs. This can be null if no environment metadata provider has been configured. | Improve this Doc View Source DefaultOwnerName Gets the default name of the owner. Declaration protected virtual string DefaultOwnerName { get; } Property Value Type Description System.String The default name of the owner. | Improve this Doc View Source EnvironmentMetadataProvider Gets the service that provides the environment metadata for a given application. Can be null if the host application does not support the environment OpenCollar.Extensions.Environment.IEnvironmentMetadataProvider service. Declaration protected IEnvironmentMetadataProvider EnvironmentMetadataProvider { get; } Property Value Type Description OpenCollar.Extensions.Environment.IEnvironmentMetadataProvider | Improve this Doc View Source InitializeAzureManagedIdentity Gets a value indicating whether Azure Managed Identity initializion should be performed before creating a connection. Declaration public bool InitializeAzureManagedIdentity { get; } Property Value Type Description System.Boolean true if Azure Managed Identity initializion initializion should be performed before creating a connection; otherwise, false . Methods | Improve this Doc View Source AnalyzeException(Exception, Connection, SqlCommand) Provides the implementor with the opportunity to analyze any exception thrown by query execution before and throw a new exception if necessary. Declaration protected virtual Exception AnalyzeException(Exception exception, Connection connection, SqlCommand command) Parameters Type Name Description System.Exception exception The exception to analyze. Connection connection The connection on which the exception occurred. Microsoft.Data.SqlClient.SqlCommand command The command being executed when the exception was thrown. Returns Type Description System.Exception | Improve this Doc View Source GetConnection(String) Gets a connection for the owner specified. Declaration public ConnectionProxy GetConnection(string owner = null) Parameters Type Name Description System.String owner A string that identifies the owner of the connection. Use null to use a default value. Returns Type Description ConnectionProxy A fully initialized database connections. Exceptions Type Condition OpenCollar.Extensions.BadImplementationException DefaultOwnerName returned null . | Improve this Doc View Source InitializeConnection(String, SqlConnection) Perform custom initialization on the connection specified. Declaration protected virtual void InitializeConnection(string owner, SqlConnection connection) Parameters Type Name Description System.String owner The owner of the connection (as defined by the caller). Microsoft.Data.SqlClient.SqlConnection connection The connection to initialize. Remarks If implemented, this method can be used to perform custom initialization (for example, initializing a security context) on new connections as they are created. All connections are created with an \"owner\". If nothing is explicitly specified the owner will be \"default\"; otherwise it is a string that, typically, will contain a value that idenifies the unique feature of the custom initialization performed (for example the calling user's email address) and connections are recycled only when the owner is the same. | Improve this Doc View Source RecycleConnection(String, SqlConnection) Recycles a connection that has previously been used. Declaration protected virtual void RecycleConnection(string owner, SqlConnection connection) Parameters Type Name Description System.String owner The owner of the connection (as defined by the caller). This is the owner that was specified when InitializeConnection(String, SqlConnection) was called, and will be the owner used when the connection is reused. Microsoft.Data.SqlClient.SqlConnection connection The connection to recycle. Remarks If implemented, this method can be used to perform custom teardown on a connection that has been freed by its current user. All connections are recycled for the see value of owner and should not normally require any custom actions when recycling. All connections are created with an \"owner\". If nothing is explicitly specified the owner will be \"default\"; otherwise it is a string that, typically, will contain a value that idenifies the unique feature of the custom initialization performed (for example the calling user's email address) and connections are recycled only when the owner is the same. | Improve this Doc View Source SetCommandTimemout(IDbCommand) Called before the command is executed, providing an opportunity for the command's timeout to be configured immediately before it is executed. Declaration protected virtual void SetCommandTimemout(IDbCommand command) Parameters Type Name Description System.Data.IDbCommand command The command to be configured. Remarks The command as a whole is provided allowing for any of its properties to be used to determine the correct timeout value. | Improve this Doc View Source ValidateConnection() Validates the connection configuration before attempting to create an new connection. Declaration protected virtual void ValidateConnection() Remarks Environment validation uses the OpenCollar.Extensions.Environment.EnvironmentMetadataProvider service to determine the application environment and the database environment and with that information validate that connections between environments are not be created accidentally. This method can be overridden by factory classes to implement special behavior. Environment validation is controlled by these following configuration properties: Property Description IsEnvironmentValidationEnabled This defaults to true . Where validation is not required the it can be disabled using this flag. IsEnvironmentValidationStrict This defaults to true . When a naming conventions are not always adhered to (for example on a developers desktop) it may be desirable to ignore the mismatches that might be caused by and unrecognized environment name. Exceptions Type Condition OpenCollar.Extensions.Environment.MismatchedEnvironmentException Database environment cannot be determined. OpenCollar.Extensions.Environment.MismatchedEnvironmentException Database environment does not match the application environment. OpenCollar.Extensions.Environment.MismatchedEnvironmentException Database environment could not be compared to the application environment, probably because it was not a known envioronment."
  },
  "api/OpenCollar.Extensions.SqlClient.QueryBuilder.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.QueryBuilder.html",
    "title": "Class QueryBuilder | API Documentation",
    "keywords": "Class QueryBuilder A class that provides a repository of the information required to construct, execute and process a query against the database. Inheritance System.Object QueryBuilder Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public sealed class QueryBuilder Properties | Improve this Doc View Source CommandText Gets the name of the stored procedure to execute. Declaration public Identifier CommandText { get; } Property Value Type Description Identifier The name of the stored procedure to execute. | Improve this Doc View Source CommandType Gets the type of the command to execute, defining the meaning of the text in the CommandText property. Declaration public CommandType CommandType { get; } Property Value Type Description System.Data.CommandType The type of the command to execute, defining the meaning of the text in the CommandText property. | Improve this Doc View Source Connection Gets the connection on which the command will be executed.. Declaration public ConnectionProxy Connection { get; } Property Value Type Description ConnectionProxy The connection on which the command will be executed. | Improve this Doc View Source Timeout Gets the timeout manually configured. Declaration public TimeSpan Timeout { get; } Property Value Type Description System.TimeSpan The timeout manually configured. Methods | Improve this Doc View Source ExecuteNonQueryAsync(Nullable<CancellationToken>) Executes the commnad a non-query, asynchronous. Declaration public Task ExecuteNonQueryAsync(CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task A task that performs the action. Exceptions Type Condition QueryException Attempt to execute command with readers without a return value. | Improve this Doc View Source ExecuteQueryAsync(Nullable<CancellationToken>) Executes the command and returns a sequence of results, asynchronously. Declaration public Task<IReadOnlyList<object>> ExecuteQueryAsync(CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyList < System.Object >> A task that performs the action. | Improve this Doc View Source ExecuteQueryAsync<T1>(Nullable<CancellationToken>) Executes the command and returns a sequence of results, asynchronously. Declaration public Task<T1> ExecuteQueryAsync<T1>(CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task <T1> A task that performs the action. Type Parameters Name Description T1 The type of the result returned. Exceptions Type Condition QueryException Attempt to execute a single reader command with another number of readers defined. | Improve this Doc View Source ExecuteQueryAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Nullable<CancellationToken>) Executes the command and returns a QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> object containing the results, asynchronously. Declaration public Task<QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> ExecuteQueryAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task < QueryResults <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> A task that performs the action. Type Parameters Name Description T1 The type of the first result returned. T2 The type of the second result returned. T3 The type of the third result returned. T4 The type of the fourth result returned. T5 The type of the fifth result returned. T6 The type of the sixth result returned. T7 The type of the seventh result returned. T8 The type of the seventh result returned. T9 The type of the ninth result returned. T10 The type of the tenth result returned. Exceptions Type Condition QueryException Attempt to execute a ten-value reader command with another number of readers defined. | Improve this Doc View Source ExecuteQueryAsync<T1, T2>(Nullable<CancellationToken>) Executes the command and returns a QueryResults<T1, T2> object containing the results, asynchronously. Declaration public Task<QueryResults<T1, T2>> ExecuteQueryAsync<T1, T2>(CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task < QueryResults <T1, T2>> A task that performs the action. Type Parameters Name Description T1 The type of the first result returned. T2 The type of the second result returned. Exceptions Type Condition QueryException Attempt to execute a two-value reader command with another number of readers defined. | Improve this Doc View Source ExecuteQueryAsync<T1, T2, T3>(Nullable<CancellationToken>) Executes the command and returns a QueryResults<T1, T2, T3> object containing the results, asynchronously. Declaration public Task<QueryResults<T1, T2, T3>> ExecuteQueryAsync<T1, T2, T3>(CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task < QueryResults <T1, T2, T3>> A task that performs the action. Type Parameters Name Description T1 The type of the first result returned. T2 The type of the second result returned. T3 The type of the second result returned. Exceptions Type Condition QueryException Attempt to execute a three-value reader command with another number of readers defined. | Improve this Doc View Source ExecuteQueryAsync<T1, T2, T3, T4>(Nullable<CancellationToken>) Executes the command and returns a QueryResults<T1, T2, T3, T4> object containing the results, asynchronously. Declaration public Task<QueryResults<T1, T2, T3, T4>> ExecuteQueryAsync<T1, T2, T3, T4>(CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task < QueryResults <T1, T2, T3, T4>> A task that performs the action. Type Parameters Name Description T1 The type of the first result returned. T2 The type of the second result returned. T3 The type of the third result returned. T4 The type of the fourth result returned. Exceptions Type Condition QueryException Attempt to execute a four-value reader command with another number of readers defined. | Improve this Doc View Source ExecuteQueryAsync<T1, T2, T3, T4, T5>(Nullable<CancellationToken>) Executes the command and returns a QueryResults<T1, T2, T3, T4, T5> object containing the results, asynchronously. Declaration public Task<QueryResults<T1, T2, T3, T4, T5>> ExecuteQueryAsync<T1, T2, T3, T4, T5>(CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task < QueryResults <T1, T2, T3, T4, T5>> A task that performs the action. Type Parameters Name Description T1 The type of the first result returned. T2 The type of the second result returned. T3 The type of the third result returned. T4 The type of the fourth result returned. T5 The type of the fifth result returned. Exceptions Type Condition QueryException Attempt to execute a five-value reader command with another number of readers defined. | Improve this Doc View Source ExecuteQueryAsync<T1, T2, T3, T4, T5, T6>(Nullable<CancellationToken>) Executes the command and returns a QueryResults<T1, T2, T3, T4, T5, T6> object containing the results, asynchronously. Declaration public Task<QueryResults<T1, T2, T3, T4, T5, T6>> ExecuteQueryAsync<T1, T2, T3, T4, T5, T6>(CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task < QueryResults <T1, T2, T3, T4, T5, T6>> A task that performs the action. Type Parameters Name Description T1 The type of the first result returned. T2 The type of the second result returned. T3 The type of the third result returned. T4 The type of the fourth result returned. T5 The type of the fifth result returned. T6 The type of the sixth result returned. Exceptions Type Condition QueryException Attempt to execute a six-value reader command with another number of readers defined. | Improve this Doc View Source ExecuteQueryAsync<T1, T2, T3, T4, T5, T6, T7>(Nullable<CancellationToken>) Executes the command and returns a QueryResults<T1, T2, T3, T4, T5, T6, T7> object containing the results, asynchronously. Declaration public Task<QueryResults<T1, T2, T3, T4, T5, T6, T7>> ExecuteQueryAsync<T1, T2, T3, T4, T5, T6, T7>(CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task < QueryResults <T1, T2, T3, T4, T5, T6, T7>> A task that performs the action. Type Parameters Name Description T1 The type of the first result returned. T2 The type of the second result returned. T3 The type of the third result returned. T4 The type of the fourth result returned. T5 The type of the fifth result returned. T6 The type of the sixth result returned. T7 The type of the seventh result returned. Exceptions Type Condition QueryException Attempt to execute a seven-value reader command with another number of readers defined. | Improve this Doc View Source ExecuteQueryAsync<T1, T2, T3, T4, T5, T6, T7, T8>(Nullable<CancellationToken>) Executes the command and returns a QueryResults<T1, T2, T3, T4, T5, T6, T7, T8> object containing the results, asynchronously. Declaration public Task<QueryResults<T1, T2, T3, T4, T5, T6, T7, T8>> ExecuteQueryAsync<T1, T2, T3, T4, T5, T6, T7, T8>(CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task < QueryResults <T1, T2, T3, T4, T5, T6, T7, T8>> A task that performs the action. Type Parameters Name Description T1 The type of the first result returned. T2 The type of the second result returned. T3 The type of the third result returned. T4 The type of the fourth result returned. T5 The type of the fifth result returned. T6 The type of the sixth result returned. T7 The type of the seventh result returned. T8 The type of the ninth result returned. Exceptions Type Condition QueryException Attempt to execute a eight-value reader command with another number of readers defined. | Improve this Doc View Source ExecuteQueryAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Nullable<CancellationToken>) Executes the command and returns a QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9> object containing the results, asynchronously. Declaration public Task<QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9>> ExecuteQueryAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task < QueryResults <T1, T2, T3, T4, T5, T6, T7, T8, T9>> A task that performs the action. Type Parameters Name Description T1 The type of the first result returned. T2 The type of the second result returned. T3 The type of the third result returned. T4 The type of the fourth result returned. T5 The type of the fifth result returned. T6 The type of the sixth result returned. T7 The type of the seventh result returned. T8 The type of the seventh result returned. T9 The type of the ninth result returned. Exceptions Type Condition QueryException Attempt to execute a nine-value reader command with another number of readers defined. | Improve this Doc View Source Read<T>(Func<SqlDataReader, T>, Boolean) Adds a reader to the command builder. Declaration public QueryBuilder Read<T>(Func<SqlDataReader, T> readAction, bool isMandatory = false) Parameters Type Name Description System.Func < Microsoft.Data.SqlClient.SqlDataReader , T> readAction The action that reads the data reader and returns a result. System.Boolean isMandatory true if least one record must be returned in the recordset; otherwise, false . Returns Type Description QueryBuilder Returns a reference to this object, allowing further parameters or other methods to be called fluently. Type Parameters Name Description T The type of the results returned. | Improve this Doc View Source ReadEach<T>(Func<SqlDataReader, T>, Boolean) Adds a reader to the command builder that iterates across all the records in a recordset reading each of them and return a result of type System.Collections.Generic.IEnumerable<T> . Declaration public QueryBuilder ReadEach<T>(Func<SqlDataReader, T> readAction, bool isMandatory = false) Parameters Type Name Description System.Func < Microsoft.Data.SqlClient.SqlDataReader , T> readAction The action that reads a single record from the data reader and returns a result. System.Boolean isMandatory true if least one record must be returned in the recordset; otherwise, false . Returns Type Description QueryBuilder Returns a reference to this object, allowing further parameters or other methods to be called fluently. Type Parameters Name Description T The type of the results returned for each record. | Improve this Doc View Source WithParameter(ParameterName, Object) Adds a parameter with the name and value specified. Declaration public QueryBuilder WithParameter(ParameterName parameterName, object value) Parameters Type Name Description ParameterName parameterName The name of the parameter. System.Object value The value to assign to the parameter. Returns Type Description QueryBuilder Returns a reference to this object, allowing further parameters or other methods to be called fluently. | Improve this Doc View Source WithRetries(Nullable<Int32>) Specifies that retries are permitted and allows the maximum number of retries to be specified. Declaration public QueryBuilder WithRetries(int? maxRetries = default(int? )) Parameters Type Name Description System.Nullable < System.Int32 > maxRetries The maximum number of retries to permit. Returns Type Description QueryBuilder | Improve this Doc View Source WithTimeout(TimeSpan) Adds a timeout to the commnad. Declaration public QueryBuilder WithTimeout(TimeSpan timeout) Parameters Type Name Description System.TimeSpan timeout The timeout period. Returns Type Description QueryBuilder Returns a reference to this object, allowing further parameters or other methods to be called fluently."
  },
  "api/OpenCollar.Extensions.SqlClient.Constants.Keys.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.Constants.Keys.html",
    "title": "Class Keys | API Documentation",
    "keywords": "Class Keys Constant values used to identify the contextual information keys. Inheritance System.Object Keys Namespace : OpenCollar.Extensions.SqlClient.Constants Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public static class Keys Fields | Improve this Doc View Source CallingUserEmailAddress An calling user's email address. Declaration public const string CallingUserEmailAddress = \"Cpt.Calling.User.Email\" Field Value Type Description System.String | Improve this Doc View Source DatabaseConnection The details of the database connection being used to access a database. Declaration public const string DatabaseConnection = \"Db.Connection\" Field Value Type Description System.String | Improve this Doc View Source DatabaseName The name of the database being access. Declaration public const string DatabaseName = \"Db.Name\" Field Value Type Description System.String | Improve this Doc View Source DatabaseSql The SQL being executed. Declaration public const string DatabaseSql = \"Db.Sql\" Field Value Type Description System.String | Improve this Doc View Source RequestUri The URI of the request being processed. Declaration public const string RequestUri = \"Request.Uri\" Field Value Type Description System.String | Improve this Doc View Source StoredProcedure The name of the stored procedure being executed. Declaration public const string StoredProcedure = \"Db.Sql\" Field Value Type Description System.String"
  },
  "api/OpenCollar.Extensions.SqlClient.QueryResults-4.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.QueryResults-4.html",
    "title": "Class QueryResults<T1, T2, T3, T4> | API Documentation",
    "keywords": "Class QueryResults<T1, T2, T3, T4> A simple, strongly-typed, container for the results of a query execution. Inheritance System.Object QueryResults <T1> QueryResults <T1, T2> QueryResults <T1, T2, T3> QueryResults<T1, T2, T3, T4> QueryResults<T1, T2, T3, T4, T5> Implements System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable Inherited Members QueryResults<T1, T2, T3>.Results3 QueryResults<T1, T2, T3>.GetEnumerator() QueryResults<T1, T2>.Results2 QueryResults<T1, T2>.GetEnumerator() QueryResults<T1>.Results1 QueryResults<T1>.IEnumerable.GetEnumerator() Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public class QueryResults<T1, T2, T3, T4> : QueryResults<T1, T2, T3>, IEnumerable<object>, IEnumerable Type Parameters Name Description T1 The type of the first result set. T2 The type of the second result set. T3 The type of the third result set. T4 The type of the fourth result set. Properties | Improve this Doc View Source Results4 Gets the fourth set of results. Declaration public T4 Results4 { get; } Property Value Type Description T4 The fourth set of results. Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public override IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > An enumerator that can be used to iterate through the collection. Overrides OpenCollar.Extensions.SqlClient.QueryResults<T1, T2, T3>.GetEnumerator() Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/OpenCollar.Extensions.SqlClient.ParseException.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.ParseException.html",
    "title": "Class ParseException | API Documentation",
    "keywords": "Class ParseException A class used to represent an exception that occurs when a SQL identifier cannot be parsed . Inheritance System.Object System.Exception ParseException Implements System.Runtime.Serialization.ISerializable Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax [Serializable] public class ParseException : Exception, ISerializable Constructors | Improve this Doc View Source ParseException(Int32) Initializes a new instance of the ParseException class. Declaration public ParseException(int characterPosition) Parameters Type Name Description System.Int32 characterPosition The zero-based position of the character at which the error was found. | Improve this Doc View Source ParseException(Int32, String) Initializes a new instance of the ParseException class with a specified error message. Declaration public ParseException(int characterPosition, string message) Parameters Type Name Description System.Int32 characterPosition The zero-based position of the character at which the error was found. System.String message The message that describes the error. | Improve this Doc View Source ParseException(Int32, String, Exception) Initializes a new instance of the ParseException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ParseException(int characterPosition, string message, Exception innerException) Parameters Type Name Description System.Int32 characterPosition The zero-based position of the character at which the error was found. System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. | Improve this Doc View Source ParseException(SerializationInfo, StreamingContext) Initializes a new instance of the ParseException class with serialized data. Declaration protected ParseException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Exceptions Type Condition System.ArgumentNullException The info parameter is null . System.Runtime.Serialization.SerializationException The class name is null or System.Exception.HResult is zero (0). Properties | Improve this Doc View Source CharacterPosition Gets the zero-based position of the character at which the error was found. Declaration public int CharacterPosition { get; } Property Value Type Description System.Int32 The zero-based position of the character at which the error was found. Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Exceptions Type Condition System.ArgumentNullException The info parameter is null . Implements System.Runtime.Serialization.ISerializable See Also ParseException"
  },
  "api/OpenCollar.Extensions.SqlClient.LoggingContext.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.LoggingContext.html",
    "title": "Namespace OpenCollar.Extensions.SqlClient.LoggingContext | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.SqlClient.LoggingContext Classes LoggingContextExtensions Extensions methods for the OpenCollar.Extensions.Logging.LoggingContext class."
  },
  "api/OpenCollar.Extensions.SqlClient.QueryResults-10.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.QueryResults-10.html",
    "title": "Class QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> | API Documentation",
    "keywords": "Class QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> A simple, strongly-typed, container for the results of a query execution. Inheritance System.Object QueryResults <T1> QueryResults <T1, T2> QueryResults <T1, T2, T3> QueryResults <T1, T2, T3, T4> QueryResults <T1, T2, T3, T4, T5> QueryResults <T1, T2, T3, T4, T5, T6> QueryResults <T1, T2, T3, T4, T5, T6, T7> QueryResults <T1, T2, T3, T4, T5, T6, T7, T8> QueryResults <T1, T2, T3, T4, T5, T6, T7, T8, T9> QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Implements System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable Inherited Members QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Results9 QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9>.GetEnumerator() QueryResults<T1, T2, T3, T4, T5, T6, T7, T8>.Results8 QueryResults<T1, T2, T3, T4, T5, T6, T7, T8>.GetEnumerator() QueryResults<T1, T2, T3, T4, T5, T6, T7>.Results7 QueryResults<T1, T2, T3, T4, T5, T6, T7>.GetEnumerator() QueryResults<T1, T2, T3, T4, T5, T6>.Results6 QueryResults<T1, T2, T3, T4, T5, T6>.GetEnumerator() QueryResults<T1, T2, T3, T4, T5>.Results5 QueryResults<T1, T2, T3, T4, T5>.GetEnumerator() QueryResults<T1, T2, T3, T4>.Results4 QueryResults<T1, T2, T3, T4>.GetEnumerator() QueryResults<T1, T2, T3>.Results3 QueryResults<T1, T2, T3>.GetEnumerator() QueryResults<T1, T2>.Results2 QueryResults<T1, T2>.GetEnumerator() QueryResults<T1>.Results1 QueryResults<T1>.IEnumerable.GetEnumerator() Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public class QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9>, IEnumerable<object>, IEnumerable Type Parameters Name Description T1 The type of the first result set. T2 The type of the second result set. T3 The type of the third result set. T4 The type of the fourth result set. T5 The type of the fifth result set. T6 The type of the sixth result set. T7 The type of the seventh result set. T8 The type of the eighth result set. T9 The type of the ninth result set. T10 The type of the ninth result set. Properties | Improve this Doc View Source Results10 Gets the tenth set of results. Declaration public T10 Results10 { get; } Property Value Type Description T10 The tenth set of results. Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public override IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > An enumerator that can be used to iterate through the collection. Overrides OpenCollar.Extensions.SqlClient.QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9>.GetEnumerator() Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/OpenCollar.Extensions.SqlClient.ConnectionProxyExtensions.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.ConnectionProxyExtensions.html",
    "title": "Class ConnectionProxyExtensions | API Documentation",
    "keywords": "Class ConnectionProxyExtensions Extensions to the ConnectionProxy class providing fluent methods for creating commands. Inheritance System.Object ConnectionProxyExtensions Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public static class ConnectionProxyExtensions Methods | Improve this Doc View Source QueryProcedure(ConnectionProxy, Identifier) Creates a new execution context builder, specifying that the stored procedure named will be executed on the connection provided.. Declaration public static QueryBuilder QueryProcedure(this ConnectionProxy connection, Identifier storedProcedure) Parameters Type Name Description ConnectionProxy connection The connection on which the command will be executed. Identifier storedProcedure The name of the stored procedure to execute. Returns Type Description QueryBuilder An QueryBuilder that can be called with further extensions to register additional details of how the command will be processed. Exceptions Type Condition System.ArgumentNullException connection is null . System.ArgumentNullException storedProcedure is null ."
  },
  "api/OpenCollar.Extensions.SqlClient.Configuration.IDatabaseConnectionConfiguration.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.Configuration.IDatabaseConnectionConfiguration.html",
    "title": "Interface IDatabaseConnectionConfiguration | API Documentation",
    "keywords": "Interface IDatabaseConnectionConfiguration A configuration object used to define the settings for a database connection. Inherited Members OpenCollar.Extensions.Configuration.IConfigurationObject.Delete() OpenCollar.Extensions.Configuration.IConfigurationObject.Load() OpenCollar.Extensions.Configuration.IConfigurationObject.Save() OpenCollar.Extensions.Configuration.IConfigurationObject.IsDirty System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : OpenCollar.Extensions.SqlClient.Configuration Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public interface IDatabaseConnectionConfiguration : IConfigurationObject, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source ConnectionCacheTimeoutSeconds Gets the period of time for which idle connection are cached, measured in seconds. Declaration [Configuration(Persistence = ConfigurationPersistenceActions.LoadOnly, DefaultValue = 120)] [Path(PathIs.Relative, \"ConnectionCacheTimeoutSeconds\")] int ConnectionCacheTimeoutSeconds { get; } Property Value Type Description System.Int32 The period of time for which idle connection are cached, measured in seconds. | Improve this Doc View Source ConnectionString Gets the database connection string. Declaration [Configuration(Persistence = ConfigurationPersistenceActions.LoadOnly)] [Path(PathIs.Relative, \"ConnectionString\")] string ConnectionString { get; } Property Value Type Description System.String The database connection string. | Improve this Doc View Source DefaultRetries Gets or sets the default number of retries to attempt, where premitted and necessary. Declaration [Configuration(Persistence = ConfigurationPersistenceActions.LoadOnly, DefaultValue = 3)] [Path(PathIs.Relative, \"DefaultRetries\")] int DefaultRetries { get; set; } Property Value Type Description System.Int32 The default number of retries to attempt, where premitted and necessary. | Improve this Doc View Source InitializeAzureManagedIdentity Gets a value indicating whether Azure Managed Identity initializion should be performed before creating a connection (if an Azure SQL Server connection is being created). Declaration [Configuration(Persistence = ConfigurationPersistenceActions.LoadOnly, DefaultValue = false)] [Path(PathIs.Relative, \"InitializeAzureManagedIdentity\")] bool InitializeAzureManagedIdentity { get; } Property Value Type Description System.Boolean true if Azure Managed Identity initializion should be performed before creating a connection (if an Azure SQL Server connection is being created); otherwise, false . | Improve this Doc View Source IsEnvironmentValidationEnabled Gets a value indicating whether this environment validation is enabled for connections. Declaration [Configuration(Persistence = ConfigurationPersistenceActions.LoadOnly, DefaultValue = true)] [Path(PathIs.Relative, \"IsEnvironmentValidationEnabled\")] bool IsEnvironmentValidationEnabled { get; } Property Value Type Description System.Boolean true if environment validation is enabled; otherwise, false . Remarks This defaults to true . Environment validation uses the OpenCollar.Extensions.Environment.EnvironmentMetadataProvider service to determine the application environment and the database environment and with that information validate that connections between environments are not be created accidentally. Where validation is not required the it can be disabled using this flag. | Improve this Doc View Source IsEnvironmentValidationStrict Gets a value indicating whether this environment validation should permit uncertainty or not. Declaration [Configuration(Persistence = ConfigurationPersistenceActions.LoadOnly, DefaultValue = true)] [Path(PathIs.Relative, \"IsEnvironmentValidationStrict\")] bool IsEnvironmentValidationStrict { get; } Property Value Type Description System.Boolean true if environment validation should treat an uncertain outcome as a fail; otherwise, false . Remarks This defaults to true . Environment validation uses the OpenCollar.Extensions.Environment.EnvironmentMetadataProvider service to determine the application environment and the database environment and with that information validate that connections between environments are not be created accidentally. When a naming conventions are not always adhered to (for example on a developers desktop) it may be desirable to ignore the mismatches that might be caused by and unrecognized environment name. See Also OpenCollar.Extensions.Configuration.IConfigurationObject"
  },
  "api/OpenCollar.Extensions.SqlClient.SqlReaderExtensions.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.SqlReaderExtensions.html",
    "title": "Class SqlReaderExtensions | API Documentation",
    "keywords": "Class SqlReaderExtensions Extensions methods that provide safe mechanisms for reading values from a Microsoft.Data.SqlClient.SqlDataReader . Inheritance System.Object SqlReaderExtensions Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public static class SqlReaderExtensions Methods | Improve this Doc View Source GetDateTimeOffsetOrDefault(SqlDataReader, Int32, Nullable<DateTimeOffset>) Gets a date time offset value from a data reader. Declaration public static DateTimeOffset? GetDateTimeOffsetOrDefault(this SqlDataReader reader, int index, DateTimeOffset? defaultValue) Parameters Type Name Description Microsoft.Data.SqlClient.SqlDataReader reader The data reader from which to take the value. System.Int32 index The index of the field to read. System.Nullable < System.DateTimeOffset > defaultValue The default value to return if the field contains System.DBNull . Returns Type Description System.Nullable < System.DateTimeOffset > The value read from the field, as a datetime offset. Exceptions Type Condition System.InvalidCastException Unable to convert from field type to System.DateTimeOffset . | Improve this Doc View Source GetValueOrDefault<T>(SqlDataReader, Int32, T) Safely reads a value from the field specified in the reader. Declaration public static T GetValueOrDefault<T>(this SqlDataReader reader, int index, T defaultValue) Parameters Type Name Description Microsoft.Data.SqlClient.SqlDataReader reader The reader from which to read the value. System.Int32 index The index of the field to read. T defaultValue The default value to return if the field contains NULL . Returns Type Description T The value of the field or defaultValue if the field contains System.DBNull . Type Parameters Name Description T The type of the value returned. Exceptions Type Condition System.ArgumentNullException reader was null . System.ArgumentOutOfRangeException index must be in range. | Improve this Doc View Source GetValueOrFail<T>(SqlDataReader, Int32) Safely reads a value from the field specified in the reader or throws a detailed exception if it cannot be read. Declaration public static T GetValueOrFail<T>(this SqlDataReader reader, int index) Parameters Type Name Description Microsoft.Data.SqlClient.SqlDataReader reader The reader from which to read the value. System.Int32 index The index of the field to read. Returns Type Description T The value of the field. Type Parameters Name Description T The type of the value returned. Exceptions Type Condition System.ArgumentNullException reader was null . System.ArgumentOutOfRangeException index must be in range. System.Data.SqlTypes.SqlNullValueException Field of dataset contains NULL."
  },
  "api/OpenCollar.Extensions.SqlClient.CallingContext.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.CallingContext.html",
    "title": "Class CallingContext | API Documentation",
    "keywords": "Class CallingContext Defines the context in which a call to a service is being made. Inheritance System.Object CallingContext Implements System.IEquatable < CallingContext > System.IComparable < CallingContext > System.IComparable Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public sealed class CallingContext : IEquatable<CallingContext>, IComparable<CallingContext>, IComparable Properties | Improve this Doc View Source Owner Gets the owner of the connection, for example an email address. Declaration public string Owner { get; } Property Value Type Description System.String The owner of the connection, for example an email address. Used to manage the reuse of connections in the connection pool. Can be left empty or null if the connection isn't tied to a single user or if no query is currently being executed. | Improve this Doc View Source Query Gets the query builder currently being executed. Declaration public QueryBuilder Query { get; } Property Value Type Description QueryBuilder The query builder currently being executed. Can be null if no query is currently being executed. Methods | Improve this Doc View Source CompareTo(CallingContext) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(CallingContext other) Parameters Type Name Description CallingContext other An object to compare with this instance. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. | Improve this Doc View Source CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object obj) Parameters Type Name Description System.Object obj An object to compare with this instance. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj . Greater than zero This instance follows obj in the sort order. Exceptions Type Condition System.ArgumentException obj is not the same type as this instance. | Improve this Doc View Source Current() Gets the context for the current thread, initializing it from the state of the an existing context (e.g. the parent thread's context when a child thread is created). Declaration public static CallingContext Current() Returns Type Description CallingContext The context for the current thread. | Improve this Doc View Source Equals(CallingContext) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(CallingContext other) Parameters Type Name Description CallingContext other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object. Overrides System.Object.ToString() Operators | Improve this Doc View Source Equality(CallingContext, CallingContext) Returns a value that indicates whether the values of two CallingContext objects are equal. Declaration public static bool operator ==(CallingContext left, CallingContext right) Parameters Type Name Description CallingContext left The first value to compare. CallingContext right The second value to compare. Returns Type Description System.Boolean true if the left and right parameters have the same value; otherwise, false . | Improve this Doc View Source GreaterThan(CallingContext, CallingContext) Returns a value that indicates whether a CallingContext value is greater than another CallingContext value. Declaration public static bool operator>(CallingContext left, CallingContext right) Parameters Type Name Description CallingContext left The first value to compare. CallingContext right The second value to compare. Returns Type Description System.Boolean true if left is greater than right ; otherwise, false . | Improve this Doc View Source GreaterThanOrEqual(CallingContext, CallingContext) Returns a value that indicates whether a CallingContext value is greater than or equal to another CallingContext value. Declaration public static bool operator >=(CallingContext left, CallingContext right) Parameters Type Name Description CallingContext left The first value to compare. CallingContext right The second value to compare. Returns Type Description System.Boolean true if left is greater than right ; otherwise, false . | Improve this Doc View Source Inequality(CallingContext, CallingContext) Returns a value that indicates whether two CallingContext objects have different values. Declaration public static bool operator !=(CallingContext left, CallingContext right) Parameters Type Name Description CallingContext left The first value to compare. CallingContext right The second value to compare. Returns Type Description System.Boolean true if left and right are not equal; otherwise, false . | Improve this Doc View Source LessThan(CallingContext, CallingContext) Returns a value that indicates whether a CallingContext value is less than another CallingContext value. Declaration public static bool operator <(CallingContext left, CallingContext right) Parameters Type Name Description CallingContext left The first value to compare. CallingContext right The second value to compare. Returns Type Description System.Boolean true if left is less than right ; otherwise, false . | Improve this Doc View Source LessThanOrEqual(CallingContext, CallingContext) Returns a value that indicates whether a CallingContext value is less than or equal to another CallingContext value. Declaration public static bool operator <=(CallingContext left, CallingContext right) Parameters Type Name Description CallingContext left The first value to compare. CallingContext right The second value to compare. Returns Type Description System.Boolean true if left is less than or equal to right ; otherwise, false . Implements System.IEquatable<T> System.IComparable<T> System.IComparable"
  },
  "api/OpenCollar.Extensions.SqlClient.ConnectionProxy.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.ConnectionProxy.html",
    "title": "Class ConnectionProxy | API Documentation",
    "keywords": "Class ConnectionProxy A proxy that wraps the Connection class that provides simple System.IDisposable semantics and other niceties. Inheritance System.Object OpenCollar.Extensions.Disposable ConnectionProxy Implements System.IDisposable Inherited Members OpenCollar.Extensions.Disposable.Dispose() OpenCollar.Extensions.Disposable.CheckNotDisposed() Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public sealed class ConnectionProxy : Disposable, IDisposable Properties | Improve this Doc View Source SqlConnection Gets the underlying connection to wrap. Declaration public SqlConnection SqlConnection { get; } Property Value Type Description Microsoft.Data.SqlClient.SqlConnection The underlying connection to wrap. Methods | Improve this Doc View Source Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides OpenCollar.Extensions.Disposable.Dispose(System.Boolean) | Improve this Doc View Source ExecuteNonQueryAsync(SqlCommand, Nullable<CancellationToken>) Executes an SQL statement against the langword_csharp_Connection object of a .NET Framework data provider, and returns the number of rows affected. Declaration public Task<int> ExecuteNonQueryAsync(SqlCommand command, CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description Microsoft.Data.SqlClient.SqlCommand command The command to execute. System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task < System.Int32 > The number of rows affected. Exceptions Type Condition System.ArgumentNullException command is null . | Improve this Doc View Source ExecuteReaderAsync(SqlCommand, CommandBehavior, Nullable<CancellationToken>) Executes the System.Data.IDbCommand.CommandText against the System.Data.IDbCommand.Connection , and builds an System.Data.IDataReader using one of the System.Data.CommandBehavior values. Declaration public Task<SqlDataReader> ExecuteReaderAsync(SqlCommand command, CommandBehavior behavior, CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description Microsoft.Data.SqlClient.SqlCommand command The command to execute. System.Data.CommandBehavior behavior One of the System.Data.CommandBehavior values. System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task < Microsoft.Data.SqlClient.SqlDataReader > An System.Data.IDataReader object. | Improve this Doc View Source ExecuteReaderAsync(SqlCommand, Nullable<CancellationToken>) Executes the System.Data.IDbCommand.CommandText against the System.Data.IDbCommand.Connection and builds an System.Data.IDataReader . Declaration public Task<SqlDataReader> ExecuteReaderAsync(SqlCommand command, CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description Microsoft.Data.SqlClient.SqlCommand command The command to execute. System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task < Microsoft.Data.SqlClient.SqlDataReader > An System.Data.IDataReader object. | Improve this Doc View Source ExecuteScalarAsync(SqlCommand, Nullable<CancellationToken>) Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored. Declaration public Task<object> ExecuteScalarAsync(SqlCommand command, CancellationToken? cancellationToken = default(CancellationToken? )) Parameters Type Name Description Microsoft.Data.SqlClient.SqlCommand command The command to execute. System.Nullable < System.Threading.CancellationToken > cancellationToken The cancellation token to be used to request that the operation be abandoned before the command timeout elapses. Returns Type Description System.Threading.Tasks.Task < System.Object > The first column of the first row in the resultset. Implements System.IDisposable Extension Methods ConnectionProxyExtensions.QueryProcedure(ConnectionProxy, Identifier) See Also System.IDisposable"
  },
  "api/OpenCollar.Extensions.SqlClient.Configuration.IDatabaseConfiguration.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.Configuration.IDatabaseConfiguration.html",
    "title": "Interface IDatabaseConfiguration | API Documentation",
    "keywords": "Interface IDatabaseConfiguration A configuration object used to define the settings for database connections. Inherited Members OpenCollar.Extensions.Configuration.IConfigurationObject.Delete() OpenCollar.Extensions.Configuration.IConfigurationObject.Load() OpenCollar.Extensions.Configuration.IConfigurationObject.Save() OpenCollar.Extensions.Configuration.IConfigurationObject.IsDirty System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : OpenCollar.Extensions.SqlClient.Configuration Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public interface IDatabaseConfiguration : IConfigurationObject, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Connections Gets or sets the dictionary of database connection definitions. Declaration [Configuration(Persistence = ConfigurationPersistenceActions.LoadOnly, DefaultValue = null)] [Path(PathIs.Absolute, \"DatabaseConfiguration:Connections\")] IConfigurationDictionary<IDatabaseConnectionConfiguration> Connections { get; set; } Property Value Type Description OpenCollar.Extensions.Configuration.IConfigurationDictionary < IDatabaseConnectionConfiguration > The dictionary of database connection definitions. See Also OpenCollar.Extensions.Configuration.IConfigurationObject"
  },
  "api/OpenCollar.Extensions.SqlClient.Model.ParameterName.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.Model.ParameterName.html",
    "title": "Class ParameterName | API Documentation",
    "keywords": "Class ParameterName Represents a valid, normalized, SQL argument name. Inheritance System.Object ParameterName Implements System.IEquatable < ParameterName > System.IComparable < ParameterName > System.IComparable Namespace : OpenCollar.Extensions.SqlClient.Model Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public sealed class ParameterName : IEquatable<ParameterName>, IComparable<ParameterName>, IComparable Constructors | Improve this Doc View Source ParameterName(String) Initializes a new instance of the ParameterName class. Declaration public ParameterName(string originalValue) Parameters Type Name Description System.String originalValue The original value given as the identifier. Exceptions Type Condition System.ArgumentNullException originalValue was null . System.ArgumentException originalValue was zero-length or contains only white-space characters. Properties | Improve this Doc View Source OriginalValue Gets the original value passed to the constructor. Declaration public string OriginalValue { get; } Property Value Type Description System.String The original value passed to the constructor. Methods | Improve this Doc View Source CompareTo(ParameterName) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(ParameterName other) Parameters Type Name Description ParameterName other An object to compare with this instance. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. | Improve this Doc View Source CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object obj) Parameters Type Name Description System.Object obj An object to compare with this instance. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj . Greater than zero This instance follows obj in the sort order. Exceptions Type Condition System.ArgumentException obj is not the same type as this instance. | Improve this Doc View Source Equals(ParameterName) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ParameterName other) Parameters Type Name Description ParameterName other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Overrides System.Object.GetHashCode() | Improve this Doc View Source ToParameterName(String) Converts from System.String to ParameterName . Declaration public static ParameterName ToParameterName(string value) Parameters Type Name Description System.String value The value to cast. Returns Type Description ParameterName The result of the conversion. | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object. Overrides System.Object.ToString() | Improve this Doc View Source ToString(ParameterName) Converts from ParameterName to System.String . Declaration public static string ToString(ParameterName value) Parameters Type Name Description ParameterName value The value to cast. Returns Type Description System.String The result of the conversion. Operators | Improve this Doc View Source Equality(ParameterName, ParameterName) Returns a value that indicates whether the values of two ParameterName objects are equal. Declaration public static bool operator ==(ParameterName left, ParameterName right) Parameters Type Name Description ParameterName left The first value to compare. ParameterName right The second value to compare. Returns Type Description System.Boolean true if the left and right parameters have the same value; otherwise, false . | Improve this Doc View Source GreaterThan(ParameterName, ParameterName) Returns a value that indicates whether a ParameterName value is greater than another ParameterName value. Declaration public static bool operator>(ParameterName left, ParameterName right) Parameters Type Name Description ParameterName left The first value to compare. ParameterName right The second value to compare. Returns Type Description System.Boolean true if left is greater than right ; otherwise, false . | Improve this Doc View Source GreaterThanOrEqual(ParameterName, ParameterName) Returns a value that indicates whether a ParameterName value is greater than or equal to another ParameterName value. Declaration public static bool operator >=(ParameterName left, ParameterName right) Parameters Type Name Description ParameterName left The first value to compare. ParameterName right The second value to compare. Returns Type Description System.Boolean true if left is greater than right ; otherwise, false . | Improve this Doc View Source Implicit(ParameterName to String) Performs an implicit conversion from ParameterName to System.String . Declaration public static implicit operator string (ParameterName value) Parameters Type Name Description ParameterName value The value to cast. Returns Type Description System.String The result of the conversion. | Improve this Doc View Source Implicit(String to ParameterName) Performs an implicit conversion from System.String to ParameterName . Declaration public static implicit operator ParameterName(string value) Parameters Type Name Description System.String value The value to cast. Returns Type Description ParameterName The result of the conversion. | Improve this Doc View Source Inequality(ParameterName, ParameterName) Returns a value that indicates whether two ParameterName objects have different values. Declaration public static bool operator !=(ParameterName left, ParameterName right) Parameters Type Name Description ParameterName left The first value to compare. ParameterName right The second value to compare. Returns Type Description System.Boolean true if left and right are not equal; otherwise, false . | Improve this Doc View Source LessThan(ParameterName, ParameterName) Returns a value that indicates whether a ParameterName value is less than another ParameterName value. Declaration public static bool operator <(ParameterName left, ParameterName right) Parameters Type Name Description ParameterName left The first value to compare. ParameterName right The second value to compare. Returns Type Description System.Boolean true if left is less than right ; otherwise, false . | Improve this Doc View Source LessThanOrEqual(ParameterName, ParameterName) Returns a value that indicates whether a ParameterName value is less than or equal to another ParameterName value. Declaration public static bool operator <=(ParameterName left, ParameterName right) Parameters Type Name Description ParameterName left The first value to compare. ParameterName right The second value to compare. Returns Type Description System.Boolean true if left is less than or equal to right ; otherwise, false . Implements System.IEquatable<T> System.IComparable<T> System.IComparable See Also System.IEquatable <T> System.IComparable <T> System.IComparable"
  },
  "api/OpenCollar.Extensions.SqlClient.LoggingContext.LoggingContextExtensions.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.LoggingContext.LoggingContextExtensions.html",
    "title": "Class LoggingContextExtensions | API Documentation",
    "keywords": "Class LoggingContextExtensions Extensions methods for the OpenCollar.Extensions.Logging.LoggingContext class. Inheritance System.Object LoggingContextExtensions Namespace : OpenCollar.Extensions.SqlClient.LoggingContext Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public static class LoggingContextExtensions Methods | Improve this Doc View Source AddDatabaseConnection(LoggingContext, String) Adds the details of a submission to the logging context. Declaration public static LoggingContext AddDatabaseConnection(this LoggingContext loggingContext, string databaseConnection) Parameters Type Name Description OpenCollar.Extensions.Logging.LoggingContext loggingContext The logging context to which to add the details. System.String databaseConnection The name of the stored procedure being executed. Returns Type Description OpenCollar.Extensions.Logging.LoggingContext The logging context provided, allowing fluent-style chaining of calls. | Improve this Doc View Source AddStoredProcedure(LoggingContext, SqlCommand) Adds the details of a submission to the logging context. Declaration public static LoggingContext AddStoredProcedure(this LoggingContext loggingContext, SqlCommand command) Parameters Type Name Description OpenCollar.Extensions.Logging.LoggingContext loggingContext The logging context to which to add the details. Microsoft.Data.SqlClient.SqlCommand command The SQL command from which to extract the stored procedure name. Returns Type Description OpenCollar.Extensions.Logging.LoggingContext The logging context provided, allowing fluent-style chaining of calls. | Improve this Doc View Source AddStoredProcedure(LoggingContext, String) Adds the details of a submission to the logging context. Declaration public static LoggingContext AddStoredProcedure(this LoggingContext loggingContext, string storedProcedure) Parameters Type Name Description OpenCollar.Extensions.Logging.LoggingContext loggingContext The logging context to which to add the details. System.String storedProcedure The name of the stored procedure being executed. Returns Type Description OpenCollar.Extensions.Logging.LoggingContext The logging context provided, allowing fluent-style chaining of calls."
  },
  "api/OpenCollar.Extensions.SqlClient.DbException.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.DbException.html",
    "title": "Class DbException | API Documentation",
    "keywords": "Class DbException An exception that is thrown as a result of a database interaction. Inheritance System.Object System.Exception DbException Implements System.Runtime.Serialization.ISerializable Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax [Serializable] public class DbException : Exception, ISerializable Constructors | Improve this Doc View Source DbException(SerializationInfo, StreamingContext) Initializes a new instance of the DbException class with serialized data. Declaration protected DbException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Exceptions Type Condition System.ArgumentNullException The info parameter is null . System.Runtime.Serialization.SerializationException The class name is null or System.Exception.HResult is zero (0). | Improve this Doc View Source DbException(String) Initializes a new instance of the DbException class. Declaration public DbException(string details) Parameters Type Name Description System.String details The details of the error and the environment at the time. | Improve this Doc View Source DbException(String, String) Initializes a new instance of the DbException class with a specified error message. Declaration public DbException(string details, string message) Parameters Type Name Description System.String details The details of the error and the environment at the time. System.String message The message that describes the error. | Improve this Doc View Source DbException(String, String, Exception) Initializes a new instance of the DbException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public DbException(string details, string message, Exception innerException) Parameters Type Name Description System.String details The details of the error and the environment at the time. System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. Properties | Improve this Doc View Source Details Gets the details of the error and the environment at the time. Declaration public string Details { get; } Property Value Type Description System.String The details of the error and the environment at the time. Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Exceptions Type Condition System.ArgumentNullException The info parameter is a null . Implements System.Runtime.Serialization.ISerializable See Also System.Exception"
  },
  "api/OpenCollar.Extensions.SqlClient.QueryResults-2.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.QueryResults-2.html",
    "title": "Class QueryResults<T1, T2> | API Documentation",
    "keywords": "Class QueryResults<T1, T2> A simple, strongly-typed, container for the results of a query execution. Inheritance System.Object QueryResults <T1> QueryResults<T1, T2> QueryResults<T1, T2, T3> Implements System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable Inherited Members QueryResults<T1>.Results1 QueryResults<T1>.IEnumerable.GetEnumerator() Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public class QueryResults<T1, T2> : QueryResults<T1>, IEnumerable<object>, IEnumerable Type Parameters Name Description T1 The type of the first result set. T2 The type of the second result set. Properties | Improve this Doc View Source Results2 Gets the second set of results. Declaration public T2 Results2 { get; } Property Value Type Description T2 The second set of results. Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public override IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > An enumerator that can be used to iterate through the collection. Overrides OpenCollar.Extensions.SqlClient.QueryResults<T1>.GetEnumerator() Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/OpenCollar.Extensions.SqlClient.Model.Identifier.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.Model.Identifier.html",
    "title": "Class Identifier | API Documentation",
    "keywords": "Class Identifier Represents a valid, normalized, SQL identifier. Inheritance System.Object Identifier Implements System.IEquatable < Identifier > System.IComparable < Identifier > System.IComparable Namespace : OpenCollar.Extensions.SqlClient.Model Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public sealed class Identifier : IEquatable<Identifier>, IComparable<Identifier>, IComparable Constructors | Improve this Doc View Source Identifier(String) Initializes a new instance of the Identifier class. Declaration public Identifier(string originalValue) Parameters Type Name Description System.String originalValue The original value given as the identifier. Exceptions Type Condition System.ArgumentNullException originalValue was null . System.ArgumentException originalValue was zero-length or contains only white-space characters. ParseException 0 - Invalid identifier, first character is '.'. ParseException Invalid identifier, last character is '.'. ParseException Invalid character found: un-escaped '[' found, and brackets already inserted. ParseException Invalid character found: closing '&quot;' found with no corresponding opening character. ParseException Invalid character found: un-escaped ']' found, and no brackets yet inserted. ParseException Invalid character found: closing ']' found with no corresponding '['. ParseException Invalid identifier, no closing quote found before end of string. ParseException Invalid identifier, no closing bracket found before of string. Properties | Improve this Doc View Source OriginalValue Gets the original value passed to the constructor. Declaration public string OriginalValue { get; } Property Value Type Description System.String The original value passed to the constructor. Methods | Improve this Doc View Source CompareTo(Identifier) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(Identifier other) Parameters Type Name Description Identifier other An object to compare with this instance. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. | Improve this Doc View Source CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object obj) Parameters Type Name Description System.Object obj An object to compare with this instance. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj . Greater than zero This instance follows obj in the sort order. Exceptions Type Condition System.ArgumentException obj is not the same type as this instance. | Improve this Doc View Source Equals(Identifier) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Identifier other) Parameters Type Name Description Identifier other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Overrides System.Object.GetHashCode() | Improve this Doc View Source ToIdentifier(Identifier) Converts from Identifier to System.String . Declaration public static string ToIdentifier(Identifier value) Parameters Type Name Description Identifier value The value to cast. Returns Type Description System.String The result of the conversion. | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object. Overrides System.Object.ToString() | Improve this Doc View Source ToString(String) Converts from System.String to Identifier . Declaration public static Identifier ToString(string value) Parameters Type Name Description System.String value The value to cast. Returns Type Description Identifier The result of the conversion. Operators | Improve this Doc View Source Equality(Identifier, Identifier) Returns a value that indicates whether the values of two Identifier objects are equal. Declaration public static bool operator ==(Identifier left, Identifier right) Parameters Type Name Description Identifier left The first value to compare. Identifier right The second value to compare. Returns Type Description System.Boolean true if the left and right parameters have the same value; otherwise, false . | Improve this Doc View Source GreaterThan(Identifier, Identifier) Returns a value that indicates whether a Identifier value is greater than another Identifier value. Declaration public static bool operator>(Identifier left, Identifier right) Parameters Type Name Description Identifier left The first value to compare. Identifier right The second value to compare. Returns Type Description System.Boolean true if left is greater than right ; otherwise, false . | Improve this Doc View Source GreaterThanOrEqual(Identifier, Identifier) Returns a value that indicates whether a Identifier value is greater than or equal to another Identifier value. Declaration public static bool operator >=(Identifier left, Identifier right) Parameters Type Name Description Identifier left The first value to compare. Identifier right The second value to compare. Returns Type Description System.Boolean true if left is greater than right ; otherwise, false . | Improve this Doc View Source Implicit(Identifier to String) Performs an implicit conversion from Identifier to System.String . Declaration public static implicit operator string (Identifier value) Parameters Type Name Description Identifier value The value to cast. Returns Type Description System.String The result of the conversion. | Improve this Doc View Source Implicit(String to Identifier) Performs an implicit conversion from System.String to Identifier . Declaration public static implicit operator Identifier(string value) Parameters Type Name Description System.String value The value to cast. Returns Type Description Identifier The result of the conversion. | Improve this Doc View Source Inequality(Identifier, Identifier) Returns a value that indicates whether two Identifier objects have different values. Declaration public static bool operator !=(Identifier left, Identifier right) Parameters Type Name Description Identifier left The first value to compare. Identifier right The second value to compare. Returns Type Description System.Boolean true if left and right are not equal; otherwise, false . | Improve this Doc View Source LessThan(Identifier, Identifier) Returns a value that indicates whether a Identifier value is less than another Identifier value. Declaration public static bool operator <(Identifier left, Identifier right) Parameters Type Name Description Identifier left The first value to compare. Identifier right The second value to compare. Returns Type Description System.Boolean true if left is less than right ; otherwise, false . | Improve this Doc View Source LessThanOrEqual(Identifier, Identifier) Returns a value that indicates whether a Identifier value is less than or equal to another Identifier value. Declaration public static bool operator <=(Identifier left, Identifier right) Parameters Type Name Description Identifier left The first value to compare. Identifier right The second value to compare. Returns Type Description System.Boolean true if left is less than or equal to right ; otherwise, false . Implements System.IEquatable<T> System.IComparable<T> System.IComparable See Also System.IEquatable <T> System.IComparable <T> System.IComparable"
  },
  "api/OpenCollar.Extensions.SqlClient.Model.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.Model.html",
    "title": "Namespace OpenCollar.Extensions.SqlClient.Model | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.SqlClient.Model Classes Identifier Represents a valid, normalized, SQL identifier. ParameterName Represents a valid, normalized, SQL argument name."
  },
  "usage/index.html": {
    "href": "usage/index.html",
    "title": "Basics | API Documentation",
    "keywords": "Basics The purpose of the libarary is to provide simple and concise extension methods that allow arguments and state to be validated efficiently at runtime."
  },
  "index.html": {
    "href": "index.html",
    "title": "OpenCollar.Extensions.SqlClient | API Documentation",
    "keywords": "OpenCollar.Extensions.SqlClient A framework that allows database queries to be executed quickly and cleanly, with validation, logging, retries and concurrency. NuGet Package Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions.SqlClient/ Project Latest Build: Source Code on GitHub Issue Tracking on GitHub Documentation on GitHub Pages Usage A framework that allows database queries to be executed quickly and cleanly, with validation, logging, retries and concurrency. Related Projects OpenCollar.Azure.ReliableQueue OpenCollar.Azure.Storage OpenCollar.Extensions OpenCollar.Extensions.ApplicationInsights OpenCollar.Extensions.Collections OpenCollar.Extensions.Configuraton OpenCollar.Extensions.Environment OpenCollar.Extensions.IO OpenCollar.Extensions.Logging OpenCollar.Extensions.Security OpenCollar.Extensions.SqlClient OpenCollar.Extensions.Threading OpenCollar.Extensions.Validation"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "OpenCollar.Extensions.SqlClient | API Documentation",
    "keywords": "OpenCollar.Extensions.SqlClient A framework that allows database queries to be executed quickly and cleanly, with validation, logging, retries and concurrency. NuGet Package Installation Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions.SqlClient/"
  },
  "api/OpenCollar.Extensions.SqlClient.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.html",
    "title": "Namespace OpenCollar.Extensions.SqlClient | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.SqlClient Classes CallingContext Defines the context in which a call to a service is being made. Connection A managed database connection. ConnectionException Defines an exception thrown within the context of a database connection. ConnectionFactory The base class for objects defining database connection factories. ConnectionProxy A proxy that wraps the Connection class that provides simple System.IDisposable semantics and other niceties. ConnectionProxyExtensions Extensions to the ConnectionProxy class providing fluent methods for creating commands. DatabaseException Defines an exception thrown within the context of a database connection. DbException An exception that is thrown as a result of a database interaction. ParseException A class used to represent an exception that occurs when a SQL identifier cannot be parsed . QueryBuilder A class that provides a repository of the information required to construct, execute and process a query against the database. QueryException Defines an exception thrown within the context of query on a database connection. QueryResults<T1> A simple, strongly-typed, container for the results of a query execution. QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> A simple, strongly-typed, container for the results of a query execution. QueryResults<T1, T2> A simple, strongly-typed, container for the results of a query execution. QueryResults<T1, T2, T3> A simple, strongly-typed, container for the results of a query execution. QueryResults<T1, T2, T3, T4> A simple, strongly-typed, container for the results of a query execution. QueryResults<T1, T2, T3, T4, T5> A simple, strongly-typed, container for the results of a query execution. QueryResults<T1, T2, T3, T4, T5, T6> A simple, strongly-typed, container for the results of a query execution. QueryResults<T1, T2, T3, T4, T5, T6, T7> A simple, strongly-typed, container for the results of a query execution. QueryResults<T1, T2, T3, T4, T5, T6, T7, T8> A simple, strongly-typed, container for the results of a query execution. QueryResults<T1, T2, T3, T4, T5, T6, T7, T8, T9> A simple, strongly-typed, container for the results of a query execution. ServiceCollectionExtensions Extensions to the Microsoft.Extensions.DependencyInjection.IServiceCollection class providing fluent methods to register ConnectionFactory services. SqlReaderExtensions Extensions methods that provide safe mechanisms for reading values from a Microsoft.Data.SqlClient.SqlDataReader ."
  },
  "api/OpenCollar.Extensions.SqlClient.QueryResults-1.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.QueryResults-1.html",
    "title": "Class QueryResults<T1> | API Documentation",
    "keywords": "Class QueryResults<T1> A simple, strongly-typed, container for the results of a query execution. Inheritance System.Object QueryResults<T1> QueryResults<T1, T2> Implements System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public class QueryResults<T1> : IEnumerable<object>, IEnumerable Type Parameters Name Description T1 The type of the first result set. Properties | Improve this Doc View Source Results1 Gets the first set of results. Declaration public T1 Results1 { get; } Property Value Type Description T1 The first set of results. Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public virtual IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > An enumerator that can be used to iterate through the collection. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator object that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/OpenCollar.Extensions.SqlClient.QueryResults-7.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.QueryResults-7.html",
    "title": "Class QueryResults<T1, T2, T3, T4, T5, T6, T7> | API Documentation",
    "keywords": "Class QueryResults<T1, T2, T3, T4, T5, T6, T7> A simple, strongly-typed, container for the results of a query execution. Inheritance System.Object QueryResults <T1> QueryResults <T1, T2> QueryResults <T1, T2, T3> QueryResults <T1, T2, T3, T4> QueryResults <T1, T2, T3, T4, T5> QueryResults <T1, T2, T3, T4, T5, T6> QueryResults<T1, T2, T3, T4, T5, T6, T7> QueryResults<T1, T2, T3, T4, T5, T6, T7, T8> Implements System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable Inherited Members QueryResults<T1, T2, T3, T4, T5, T6>.Results6 QueryResults<T1, T2, T3, T4, T5, T6>.GetEnumerator() QueryResults<T1, T2, T3, T4, T5>.Results5 QueryResults<T1, T2, T3, T4, T5>.GetEnumerator() QueryResults<T1, T2, T3, T4>.Results4 QueryResults<T1, T2, T3, T4>.GetEnumerator() QueryResults<T1, T2, T3>.Results3 QueryResults<T1, T2, T3>.GetEnumerator() QueryResults<T1, T2>.Results2 QueryResults<T1, T2>.GetEnumerator() QueryResults<T1>.Results1 QueryResults<T1>.IEnumerable.GetEnumerator() Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public class QueryResults<T1, T2, T3, T4, T5, T6, T7> : QueryResults<T1, T2, T3, T4, T5, T6>, IEnumerable<object>, IEnumerable Type Parameters Name Description T1 The type of the first result set. T2 The type of the second result set. T3 The type of the third result set. T4 The type of the fourth result set. T5 The type of the fifth result set. T6 The type of the sixth result set. T7 The type of the seventh result set. Properties | Improve this Doc View Source Results7 Gets the seventh set of results. Declaration public T7 Results7 { get; } Property Value Type Description T7 The seventh set of results. Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public override IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > An enumerator that can be used to iterate through the collection. Overrides OpenCollar.Extensions.SqlClient.QueryResults<T1, T2, T3, T4, T5, T6>.GetEnumerator() Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/OpenCollar.Extensions.SqlClient.QueryResults-3.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.QueryResults-3.html",
    "title": "Class QueryResults<T1, T2, T3> | API Documentation",
    "keywords": "Class QueryResults<T1, T2, T3> A simple, strongly-typed, container for the results of a query execution. Inheritance System.Object QueryResults <T1> QueryResults <T1, T2> QueryResults<T1, T2, T3> QueryResults<T1, T2, T3, T4> Implements System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable Inherited Members QueryResults<T1, T2>.Results2 QueryResults<T1, T2>.GetEnumerator() QueryResults<T1>.Results1 QueryResults<T1>.IEnumerable.GetEnumerator() Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax public class QueryResults<T1, T2, T3> : QueryResults<T1, T2>, IEnumerable<object>, IEnumerable Type Parameters Name Description T1 The type of the first result set. T2 The type of the second result set. T3 The type of the third result set. Properties | Improve this Doc View Source Results3 Gets the third set of results. Declaration public T3 Results3 { get; } Property Value Type Description T3 The third set of results. Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public override IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > An enumerator that can be used to iterate through the collection. Overrides OpenCollar.Extensions.SqlClient.QueryResults<T1, T2>.GetEnumerator() Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/OpenCollar.Extensions.SqlClient.ConnectionException.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.ConnectionException.html",
    "title": "Class ConnectionException | API Documentation",
    "keywords": "Class ConnectionException Defines an exception thrown within the context of a database connection. Inheritance System.Object System.Exception ConnectionException DatabaseException Implements System.Runtime.Serialization.ISerializable Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax [Serializable] public class ConnectionException : Exception, ISerializable Constructors | Improve this Doc View Source ConnectionException(SerializationInfo, StreamingContext) Initializes a new instance of the ConnectionException class. Declaration protected ConnectionException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source ConnectionException(String) Initializes a new instance of the ConnectionException class. Declaration public ConnectionException(string connectionString) Parameters Type Name Description System.String connectionString The connection string that defines the connection on which the error occurred. Exceptions Type Condition System.ArgumentNullException connectionString is null . System.ArgumentException connectionString is zero-length or contains only white-space characters. | Improve this Doc View Source ConnectionException(String, String) Initializes a new instance of the ConnectionException class. Declaration public ConnectionException(string connectionString, string message) Parameters Type Name Description System.String connectionString The connection string that defines the connection on which the error occurred. System.String message The message that describes the error. Exceptions Type Condition System.ArgumentNullException connectionString is null . System.ArgumentException connectionString is zero-length or contains only white-space characters. | Improve this Doc View Source ConnectionException(String, String, Exception) Initializes a new instance of the ConnectionException class. Declaration public ConnectionException(string connectionString, string message, Exception innerException) Parameters Type Name Description System.String connectionString The connection string that defines the connection on which the error occurred. System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. Exceptions Type Condition System.ArgumentNullException connectionString is null . System.ArgumentException connectionString is zero-length or contains only white-space characters. Properties | Improve this Doc View Source ConnectionString Gets the connection string that defines the connection on which the error occurred. Declaration public string ConnectionString { get; } Property Value Type Description System.String The connection string that defines the connection on which the error occurred. Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Implements System.Runtime.Serialization.ISerializable See Also System.Exception"
  },
  "api/OpenCollar.Extensions.SqlClient.QueryException.html": {
    "href": "api/OpenCollar.Extensions.SqlClient.QueryException.html",
    "title": "Class QueryException | API Documentation",
    "keywords": "Class QueryException Defines an exception thrown within the context of query on a database connection. Inheritance System.Object System.Exception ConnectionException DatabaseException QueryException Implements System.Runtime.Serialization.ISerializable Inherited Members ConnectionException.ConnectionString Namespace : OpenCollar.Extensions.SqlClient Assembly : OpenCollar.Extensions.SqlClient.dll Syntax [Serializable] public class QueryException : DatabaseException, ISerializable Constructors | Improve this Doc View Source QueryException(SerializationInfo, StreamingContext) Initializes a new instance of the QueryException class. Declaration protected QueryException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source QueryException(String, Boolean) Initializes a new instance of the QueryException class. Declaration public QueryException(string connectionString, bool canRetry = false) Parameters Type Name Description System.String connectionString The connection string that defines the connection on which the error occurred. System.Boolean canRetry true if the query that caused this exception can safely be re-run; otherwise, false . Defaults to false . Exceptions Type Condition System.ArgumentNullException connectionString is null . System.ArgumentException connectionString is zero-length or contains only white-space characters. | Improve this Doc View Source QueryException(String, String, Boolean) Initializes a new instance of the QueryException class. Declaration public QueryException(string connectionString, string message, bool canRetry = false) Parameters Type Name Description System.String connectionString The connection string that defines the connection on which the error occurred. System.String message The message that describes the error. System.Boolean canRetry true if the query that caused this exception can safely be re-run; otherwise, false . Defaults to false . Exceptions Type Condition System.ArgumentNullException connectionString is null . System.ArgumentException connectionString is zero-length or contains only white-space characters. | Improve this Doc View Source QueryException(String, String, Exception, Boolean) Initializes a new instance of the QueryException class. Declaration public QueryException(string connectionString, string message, Exception innerException, bool canRetry = false) Parameters Type Name Description System.String connectionString The connection string that defines the connection on which the error occurred. System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or null if no inner exception is specified. System.Boolean canRetry true if the query that caused this exception can safely be re-run; otherwise, false . Defaults to false . Exceptions Type Condition System.ArgumentNullException connectionString is null . System.ArgumentException connectionString is zero-length or contains only white-space characters. Properties | Improve this Doc View Source CanRetry Gets or sets a value indicating whether the query that caused this exception can safely be re-run. Declaration public bool CanRetry { get; set; } Property Value Type Description System.Boolean true if the query that caused this exception can safely be re-run; otherwise, false . Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Overrides DatabaseException.GetObjectData(SerializationInfo, StreamingContext) Implements System.Runtime.Serialization.ISerializable See Also DatabaseException"
  }
}